# -*- coding: utf-8 -*-
"""submission-ml-terapan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13QJbr6WQzlasGZMIS6EdSmTH4gXvc1YU

# Import Library
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

from sklearn.preprocessing import  OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error

"""# Data loading"""

# load the dataset
fileCSV = '/content/StudentPerformanceFactors.csv'
df = pd.read_csv(fileCSV)
df

"""# Exploratory Data Analysis (EDA)

## EDA Deskripsi Variabel
"""

df.info()

df.describe()

"""## EDA Menangani Missing Value"""

df.isnull().sum()

df.dropna(inplace=True)

df.isnull().sum()

"""## EDA Mendeteksi/Menangani Outliers"""

sns.boxplot(x=df['Hours_Studied'])

sns.boxplot(x=df['Attendance'])

sns.boxplot(x=df['Sleep_Hours'])

sns.boxplot(x=df['Previous_Scores'])

sns.boxplot(x=df['Tutoring_Sessions'])

sns.boxplot(x=df['Physical_Activity'])

sns.boxplot(x=df['Exam_Score'])

"""Tidak dilakukan penanganan outliers dikarenakan bisa saja hal tersebut benar benar terjadi pada seorang siswa

## EDA Univariate Analysis
"""

numerical_features = ['Hours_Studied', 'Attendance', 'Sleep_Hours', 'Previous_Scores', 'Tutoring_Sessions', 'Physical_Activity', 'Exam_Score']
categorical_features = ['Parental_Involvement', 'Access_to_Resources', 'Extracurricular_Activities', 'Motivation_Level', 'Internet_Access', 'Family_Income', 'Teacher_Quality', 'School_Type', 'Peer_Influence', 'Learning_Disabilities', 'Parental_Education_Level', 'Distance_from_Home', 'Gender']

"""### Numerical Features"""

df.hist(bins=50, figsize=(20,15))
plt.show()

"""### Categorical Features"""

feature = categorical_features[0]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_parental_involvement = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_parental_involvement)
count.plot(kind='bar', title=feature);

feature = categorical_features[1]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_Access_to_Resources = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_Access_to_Resources)
count.plot(kind='bar', title=feature);

feature = categorical_features[2]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_Extracurricular_Activities = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_Extracurricular_Activities)
count.plot(kind='bar', title=feature);

feature = categorical_features[3]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_Motivation_Level = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_Motivation_Level)
count.plot(kind='bar', title=feature);

feature = categorical_features[4]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_Internet_Access = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_Internet_Access)
count.plot(kind='bar', title=feature);

feature = categorical_features[5]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_Family_Income = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_Family_Income)
count.plot(kind='bar', title=feature);

feature = categorical_features[6]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_Teacher_Quality	 = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_Teacher_Quality)
count.plot(kind='bar', title=feature);

feature = categorical_features[7]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_School_Type	 = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_School_Type)
count.plot(kind='bar', title=feature);

feature = categorical_features[8]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_Peer_Influence	 = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_Peer_Influence)
count.plot(kind='bar', title=feature);

feature = categorical_features[9]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_Learning_Disabilities	 = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_Learning_Disabilities)
count.plot(kind='bar', title=feature);

feature = categorical_features[10]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_Parental_Education_Level	 = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_Parental_Education_Level)
count.plot(kind='bar', title=feature);

feature = categorical_features[11]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_Distance_from_Home	 = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_Distance_from_Home)
count.plot(kind='bar', title=feature);

feature = categorical_features[12]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_Gender	 = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_Gender)
count.plot(kind='bar', title=feature);

"""## EDA Multivariate Analysis

### Numerical Features
"""

# Mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(df, diag_kind = 'kde')

"""### Categorical Features"""

cat_features = df.select_dtypes(include='object').columns.to_list()

for col in cat_features:
  sns.catplot(x=col, y="Exam_Score", kind="bar", dodge=False, height = 4, aspect = 3,  data=df, palette="Set3")
  plt.title("Rata-rata 'Exam_Score' Relatif terhadap - {}".format(col))

"""### Correlation Matrix Fitur Numerik"""

plt.figure(figsize=(10, 8))
correlation_matrix = df[numerical_features].corr().round(2)

# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

df.drop(['Sleep_Hours', 'Previous_Scores', 'Tutoring_Sessions', 'Physical_Activity'], inplace=True, axis=1)
df.head()

"""# Data Preparation

## Encoding Fitur Kategori
"""

df = pd.concat([df, pd.get_dummies(df['Parental_Involvement'], prefix='Parental_Involvement')],axis=1)
df = pd.concat([df, pd.get_dummies(df['Access_to_Resources'], prefix='Access_to_Resources')],axis=1)
df = pd.concat([df, pd.get_dummies(df['Extracurricular_Activities'], prefix='Extracurricular_Activities')],axis=1)
df = pd.concat([df, pd.get_dummies(df['Motivation_Level'], prefix='Motivation_Level')],axis=1)
df = pd.concat([df, pd.get_dummies(df['Internet_Access'], prefix='Internet_Access')],axis=1)
df = pd.concat([df, pd.get_dummies(df['Family_Income'], prefix='Family_Income')],axis=1)
df = pd.concat([df, pd.get_dummies(df['Teacher_Quality'], prefix='Teacher_Quality')],axis=1)
df = pd.concat([df, pd.get_dummies(df['School_Type'], prefix='School_Type')],axis=1)
df = pd.concat([df, pd.get_dummies(df['Peer_Influence'], prefix='Peer_Influence')],axis=1)
df = pd.concat([df, pd.get_dummies(df['Learning_Disabilities'], prefix='Learning_Disabilities')],axis=1)
df = pd.concat([df, pd.get_dummies(df['Parental_Education_Level'], prefix='Parental_Education_Level')],axis=1)
df = pd.concat([df, pd.get_dummies(df['Distance_from_Home'], prefix='Distance_from_Home')],axis=1)
df = pd.concat([df, pd.get_dummies(df['Gender'], prefix='Gender')],axis=1)
df.drop(df.select_dtypes(include='object').columns, axis=1, inplace=True)
df.head()

df = df.astype(int)

df.head()

"""## Train-Test-Split"""

X = df.drop(["Exam_Score"],axis =1)
y = df["Exam_Score"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""## Standarisasi"""

numerical_features = ['Hours_Studied', 'Attendance']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(4)

"""# Model Development

## Model Development dengan Random Forest
"""

RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)

"""## Model Development dengan K-Nearest Neighbor"""

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)

"""# Evaluasi Model"""

# Lakukan scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

mse = pd.DataFrame(columns=['train', 'test'], index=['RF', 'KNN'])

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'RF': RF, 'KNN': knn}

# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

# Panggil mse
mse

mae = pd.DataFrame(columns=['train', 'test'], index=['RF', 'KNN'])

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'RF': RF, 'KNN': knn}

# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mae.loc[name, 'train'] = mean_absolute_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
    mae.loc[name, 'test'] = mean_absolute_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

# Panggil mse
mae

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)